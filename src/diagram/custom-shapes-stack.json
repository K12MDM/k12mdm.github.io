{"index.html":"<html><head><script src=\"//ej2.syncfusion.com/javascript/demos/diagram/custom-shapes/datasource.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.syncfusion.com/ej2/dist/ej2.min.js\" type=\"text/javascript\"></script>\n    <link href=\"https://cdn.syncfusion.com/ej2/material.css\" rel=\"stylesheet\">\n\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <style>\n            body{\n                touch-action:none;\n            }\n        </style></head><body><div class=\"stackblitz-container {{theme}}\">\n<script id=\"nodetemplate\" type=\"text/x-template\">\n\n    ${if(id == 'node')}\n<div id=\"diagram_control\" class=\"diagram_border_cus\">\n    <div class=\"pane col-xs-12 col-sm-12 col-md-12 pie-container\">\n        <div class=\"pieChartHeader\">\n            <p class=\"chart-title\">Total Expenses</p>\n            <p id=\"rangeDate\" class=\"chart-value\">Jun 1 - Dec 1</p>\n        </div>\n    \n    <div id=\"pieChart\" style=\"height:100%; width:49%; overflow:hidden;float:left;\" margin=\"20px\"> \n    </div>\n        <div id=\"grid\" style=\"height:100%; width:49%; overflow:hidden;float:left;\" > </div>\n    </div>\n</div>\n    ${else if(id == 'node2')}\n    <div class=\"diagram_border_cus diagram_chart\">\n    <div id=\"lineChart\" > </div>\n</div>\n    ${else if(id == 'node3')}\n    <div class=\"diagram_border_cus diagram_chart\">\n    <div id=\"barChart\" > </div>\n</div>\n    ${else if(id == 'node4')}\n    <div class=\"diagram_border_cus diagram_border_cal\">\n    <div id=\"element_calander\" > \n        <input id=\"daterange\" type=\"text\" style=\"horizontal-align:Left;vertical-align:Top\">\n    </div>\n    </div>\n${/if} \n</script>\n<script id=\"rowtemplate\" type=\"text/x-template\">\n    <tr style=\"height: 30px;\">\n        <td>\n            <div style=\"width: 16px; height: 16px; margin-left: 1px; border-radius: 16px; background:${color}\"></div>\n        </td>\n        <td> ${text} </td>\n        <td> ${(data.y)} </td>\n        <td style=\"text-align:right;\"> ${x} </td>\n    </tr>\n</script>\n\n<div id=\"custom-diagram\" class=\"control-section\">\n    <div id=\"diagram\"></div>\n</div>\n\n\n\n</div></body></html>","index.js":"{{ripple}}ej.base.enableRipple(window.ripple);\nej.diagrams.Diagram.Inject(ej.diagrams.DataBinding, ej.charts.Chart);/**\n\n * Getting started -  Html Node\n */\n\n// tslint:disable-next-line:max-func-body-length\n\nvar predicateStart = new ej.data.Predicate('DateTime', 'greaterthanorequal', window.startDate);\nvar predicateEnd = new ej.data.Predicate('DateTime', 'lessthanorequal', window.endDate);\nvar predicate = predicateStart.and(predicateEnd);\n\n\n    var shape = { type: 'HTML' };\n    var constraints = ej.diagrams.NodeConstraints.Default & ~(ej.diagrams.NodeConstraints.Resize | ej.diagrams.NodeConstraints.Rotate);\n    var nodes = [{\n        id: 'node', offsetX: 10, offsetY: 100, width: 1050, height: 450, shape: shape, constraints: constraints\n    },\n    {\n        id: 'node2', offsetX: 276, offsetY: 550, width: 512, height: 408, shape: shape, constraints: constraints\n    },\n    {\n        id: 'node3', offsetX: -257, offsetY: 550, width: 512, height: 408, shape: shape, constraints: constraints\n    },\n    {\n        id: 'node4', offsetX: 409, offsetY: -151, width: 250, height: 30, shape: shape, constraints: constraints\n    },\n    {\n        id: 'node5', offsetX: -434, offsetY: -157, width: 250, height: 30,\n        style: { fill: 'transparent', strokeColor: 'transparent' },\n        constraints: ej.diagrams.NodeConstraints.Default & ~ej.diagrams.NodeConstraints.Select,\n        annotations: [{\n            content: \"EXPENSE TRACKER\",\n            style: { fontSize: 16, color: \"#797979\", bold: true }\n        }]\n    }];\n\n    //initialize the diagram control\n    var diagram = new ej.diagrams.Diagram({\n        width: '100%', height: '900px', nodes: nodes,\n        backgroundColor: '#F5F5F5',\n        nodeTemplate: '#nodetemplate',\n        created: function () { diagram.fitToPage(); }\n    });\n    diagram.appendTo('#diagram');\n    getTotalExpense();\n    initialRender();\n    pie = new ej.charts.AccumulationChart({\n        enableSmartLabels: true, width: '100%', height: '350px', series: getSeries(),\n        legendSettings: { visible: true }, textRender: function (args) {\n            args.series.dataLabel.font.size = '13px';\n            pie.animateSeries = true; if (args.text.indexOf('Others') > -1) { args.text = 'Others'; }\n        },\n    });\n    pie.appendTo('#pieChart');\n    createLegendData('pie');\n    grid = new ej.grids.Grid({\n        width: '40%', dataSource: pieRenderData, rowTemplate: '#rowtemplate',\n        columns: [{ width: '10%', textAlign: 'Center' },\n        { width: '50%' },\n        { width: '20%' },\n        { width: '20%' }],\n    });\n    grid.appendTo('#grid');\n\n    dateRangePickerObject = new ej.calendars.DateRangePicker({\n        format: 'MM/dd/yyyy', change: onDateRangeChange, startDate: window.startDate,\n        min: new Date(2017, 05, 01), max: new Date(2017, 10, 30),\n        endDate: window.endDate, showClearButton: false, allowEdit: false,\n        presets: [\n            { label: 'Last Month', start: new Date('10/1/2017'), end: new Date('10/31/2017') },\n            { label: 'Last 3 Months', start: new Date('9/1/2017'), end: new Date('11/30/2017') },\n            { label: 'All Time', start: new Date('6/1/2017'), end: new Date('11/30/2017') }\n        ]\n    });\n    dateRangePickerObject.appendTo('#daterange');\n    window.startDate = dateRangePickerObject.startDate;\n    window.endDate = dateRangePickerObject.endDate;\n\n\nfunction onDateRangeChange(args) {\n    window.startDate = args.startDate;\n    window.endDate = args.endDate;\n    predicateStart = new ej.data.Predicate('DateTime', 'greaterthanorequal', args.startDate);\n    predicateEnd = new ej.data.Predicate('DateTime', 'lessthanorequal', args.endDate);\n    predicate = predicateStart.and(predicateEnd);\n    initialRender();\n    getTotalExpense();\n    pie.series = getSeries();\n    pie.dataBind();\n    pie.refresh();\n    createLegendData('pieUpdate');\n    grid.dataSource = pieRenderData;\n    grid.dataBind();\n    grid.refresh();\n}\nfunction initialRender() {\n    new ej.data.DataManager(window.expenseData)\n        .executeQuery(new ej.data.Query().where(predicate.and('TransactionType', 'equal', 'Expense')))\n        .then(function (e) {\n            getCoulmnChartExpenseDS(e);\n        });\n    new ej.data.DataManager(window.expenseData)\n        .executeQuery(new ej.data.Query().where(predicate.and('TransactionType', 'equal', 'Income')))\n        .then(function (e) {\n            getCoulmnChartIncomeDS(e);\n            columnChartObj = new ej.charts.Chart({\n                width: '100%', height: '400px',\n                primaryXAxis: { labelFormat: 'MMM', valueType: 'DateTime', intervalType: 'Months', edgeLabelPlacement: 'Shift' },\n                primaryYAxis: { minimum: 3000, maximum: 9000, labelFormat: 'c0' },\n                useGroupingSeparator: true,\n                series: [{\n                    type: 'Column', dataSource: columnIncomeDS, xName: 'DateTime', width: 2, yName: 'Amount',\n                    name: 'Income', legendShape: 'Circle', marker: { visible: true, height: 10, width: 10 },\n                    border: { width: 0.5, color: '#A16EE5' },\n                    fill: '#A16EE5', animation: { enable: false },\n                },\n                {\n                    type: 'Column', legendShape: 'Circle', name: 'Expense', dataSource: columnExpenseDS, xName: 'DateTime',\n                    width: 2, yName: 'Amount', marker: { visible: true, height: 10, width: 10 }, fill: '#4472C4',\n                    animation: { enable: false },\n                },\n                ],\n                annotations: [{\n                    content: '<p style=\"font-family:Roboto;font-size: 16px;font-weight: 400;font-weight: 400;letter-spacing: 0.02em;line-height: 16px;color: #797979 !important;\">Income - Expense</p>',\n                    x: '75px', y: '9%', coordinateUnits: 'Pixel', region: 'Chart'\n                }],\n                margin: { top: 90 },\n                legendSettings: { visible: true },\n                titleStyle: { textAlignment: 'Near', fontWeight: '500', size: '16', color: '#000' },\n                tooltip: { fill: '#707070', enable: true, shared: true, format: '${series.name} : ${point.y}', header: 'Month - ${point.x} ', }\n            });\n            columnChartObj.appendTo('#barChart');\n            var content = '<p style=\"font-family:Roboto;font-size: 16px;font-weight: 400;font-weight: 400;letter-spacing: 0.02em;line-height: 16px;color: #797979 !important;\">Account - Balance</p>';\n            getLineChartDS();\n            linechartObj = new ej.charts.Chart({\n                width: '100%', height: '400px',\n                primaryXAxis: { valueType: 'DateTime', labelFormat: 'MMM', majorGridLines: { width: 0 }, intervalType: 'Months' },\n                primaryYAxis: { maximum: 1800, interval: 300, labelFormat: 'c0', },\n                useGroupingSeparator: true,\n                chartArea: { border: { width: 0 } },\n                annotations: [{ content: content, x: '75px', y: '9%', coordinateUnits: 'Pixel', region: 'Chart' }],\n                titleStyle: {\n                    textAlignment: 'Near', fontWeight: '500', size: '16', color: '#000'\n                },\n                series: [{\n                    type: 'Area', dataSource: lineDS, xName: 'DateTime', width: 2, marker: {\n                        visible: true, width: 10, height: 10,\n                        fill: 'white', border: { width: 2, color: '#0470D8' },\n                    }, yName: 'Amount', name: 'Amount', fill: 'rgba(4, 112, 216, 0.3)',\n                    border: { width: 0.5, color: '#0470D8' }\n                },\n                ],\n                margin: { top: 90 }, tooltip: {\n                    fill: '#707070', enable: true, shared: true, format: '${series.name} : ${point.y}',\n                    header: 'Month - ${point.x} '\n                }\n            });\n            linechartObj.appendTo('#lineChart');\n        });\n}\nfunction getTotalExpense() {\n    expTotal = 0;\n    category = [];\n    legendData = [];\n    var renderingData = [];\n    tempData.forEach(function (item) {\n        if (item.TransactionType === 'Expense' && window.startDate.valueOf() <= item.DateTime.valueOf() && window.endDate.valueOf() >= item.DateTime.valueOf()) {\n            expTotal += Number(item.Amount);\n            legendData.push(item);\n            if (category.indexOf(item.Category) < 0) {\n                category.push(item.Category);\n            }\n        }\n    });\n    category.forEach(function (str) {\n        var total = 0;\n        legendData.forEach(function (item) {\n            if (str === item.Category) {\n                total += Number(item.Amount);\n            }\n        });\n        var percent = ((total / expTotal) * 100).toFixed(2) + '%';\n        renderingData.push({ x: str, y: total, text: percent });\n    });\n    pieRenderingData = new ej.data.DataManager(JSON.parse(JSON.stringify(renderingData))).executeLocal((new ej.data.Query().sortByDesc('y')));\n    if (pieRenderingData.length > 10) {\n        var temp = new ej.data.DataManager(JSON.parse(JSON.stringify(renderingData))).executeLocal((new ej.data.Query().sortByDesc('y').range(0, 9)))[8];\n        groupValue = temp.y - 1;\n        hiGridData = new ej.data.DataManager(JSON.parse(JSON.stringify(renderingData))).executeLocal((new ej.data.Query().sortByDesc('y').skip(9)));\n    }\n}\n"}